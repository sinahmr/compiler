$Program ~ $#init $DeclarationList EOF
$DeclarationList ~ $DeclarationList $Declaration
$DeclarationList ~ $Declaration
$Declaration ~ $VarDeclaration
$Declaration ~ $FunDeclaration
$VarDeclaration ~ int ID $#def_var ;
$VarDeclaration ~ int ID [ $#def_arr $#set_pointer NUM $#arr_size ] ;
$FunDeclaration ~ int ID ( $#def_func $#start_scope_func $Params ) $#init_func $CompoundStmt $#end_func
$FunDeclaration ~ void ID ( $#def_func $#start_scope_func $Params ) $#init_func $CompoundStmt $#end_func
$Params ~ $ParamList
$Params ~ void
$ParamList ~ $ParamList , $Param $#func_add_param
$ParamList ~ $Param $#func_add_param
$Param ~ int ID $#def_var 
$Param ~ int ID [ $#def_arr ]
$CompoundStmt ~ { $#start_scope $LocalDeclarations $StatementList $#end_scope }
$LocalDeclarations ~ $LocalDeclarations $VarDeclaration
$LocalDeclarations ~ !
$StatementList ~ $StatementList $Statement
$StatementList ~ !
$Statement ~ $ExpressionStmt
$Statement ~ $CompoundStmt
$Statement ~ $SelectionStmt
$Statement ~ $IterationStmt
$Statement ~ $ReturnStmt
$Statement ~ output ( $Expression $#output ) ;
$ExpressionStmt ~ $Var = $Expression $#assign ;
$ExpressionStmt ~ ;
$SelectionStmt ~ if ( $GenExpression ) $#save $Statement $#jpf
$SelectionStmt ~ if ( $GenExpression ) $#save $Statement else $#jpf_save $Statement $#jp
$IterationStmt ~ while $#label ( $GenExpression ) $#save $Statement $#while
$ReturnStmt ~ return $#end_func ;
$ReturnStmt ~ return $GenExpression $#set_ret_value $#end_func ;
$Var ~ ID $#pid
$Var ~ ID $#pid $#push_arr_size [ $Expression ] $#arr_addr
$GenExpression ~ $RelExpression
$GenExpression ~ $Expression
$RelExpression ~ $RelExpression && $RelTerm $#and
$RelExpression ~ $RelTerm
$RelTerm ~ $Expression == $Expression $#equal
$RelTerm ~ $Expression < $Expression $#larger
$Expression ~ $Expression $AddOp $Term $#add
$Expression ~ $Term
$AddOp ~ + $#plus
$AddOp ~ - $#minus
$Term ~ $Term $MulOp $Factor $#mult
$Term ~ $Factor
$MulOp ~ * $#times
$MulOp ~ / $#divide
$Factor ~ ( $Expression )
$Factor ~ $Var
$Factor ~ $Call
$Factor ~ NUM $#num_value
$Call ~ ID $#pid $#init_copy ( $Args ) $#call
$Args ~ $ArgList
$Args ~ !
$ArgList ~ $ArgList , $Expression $#copy_input
$ArgList ~ $Expression $#copy_input
$#init ~ !
$#def_var ~ !
$#def_arr ~ !
$#set_pointer ~ !
$#arr_size ~ !
$#def_func ~ !
$#start_scope_func ~ !
$#init_func ~ !
$#end_func ~ !
$#func_add_param ~ !
$#start_scope ~ !
$#end_scope ~ !
$#output ~ !
$#assign ~ !
$#save ~ !
$#jpf ~ !
$#jpf_save ~ !
$#jp ~ !
$#label ~ !
$#while ~ !
$#set_ret_value ~ !
$#pid ~ !
$#push_arr_size ~ !
$#arr_addr ~ !
$#and ~ !
$#equal ~ !
$#larger ~ !
$#add ~ !
$#plus ~ !
$#minus ~ !
$#mult ~ !
$#times ~ !
$#divide ~ !
$#num_value ~ !
$#init_copy ~ !
$#call ~ !
$#copy_input ~ !